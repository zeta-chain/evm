syntax = "proto3";
package ethermint.evm.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "ethermint/evm/v1/evm.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/cosmos/evm/legacy/evm";

// AccessTuple is the element type of an access list.
message AccessTuple {
  option (gogoproto.goproto_getters) = false;

  // address is a hex formatted ethereum address
  string address = 1;
  // storage_keys are hex formatted hashes of the storage keys
  repeated string storage_keys = 2 [ (gogoproto.jsontag) = "storageKeys" ];
}

// Deprecated: MsgEthereumTx encapsulates an Ethereum transaction as an SDK
// message.
message MsgEthereumTx {
  option (gogoproto.goproto_getters) = false;

  // data is inner transaction data of the Ethereum transaction
  google.protobuf.Any data = 1;

  // size is the encoded storage size of the transaction (DEPRECATED)
  double size = 2 [ (gogoproto.jsontag) = "-" ];
  // hash of the transaction in hex format
  string hash = 3 [ (gogoproto.moretags) = "rlp:\"-\"" ];
  // from is the ethereum signer address in hex format. This address value is
  // checked against the address derived from the signature (V, R, S) using the
  // secp256k1 elliptic curve
  string from = 4;
}

// Deprecated: used for backward compatibility
message LegacyTx {
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "TxData";

  // nonce corresponds to the account nonce (transaction sequence).
  uint64 nonce = 1;
  // gas_price defines the value for each gas unit
  string gas_price = 2 [ (gogoproto.customtype) = "cosmossdk.io/math.Int" ];
  // gas defines the gas limit defined for the transaction.
  uint64 gas = 3 [ (gogoproto.customname) = "GasLimit" ];
  // to is the hex formatted address of the recipient
  string to = 4;
  // value defines the unsigned integer value of the transaction amount.
  string value = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.customname) = "Amount"
  ];
  // data is the data payload bytes of the transaction.
  bytes data = 6;
  // v defines the signature value
  bytes v = 7;
  // r defines the signature value
  bytes r = 8;
  // s define the signature value
  bytes s = 9;
}

// Deprecated: used for backward compatibility
message AccessListTx {
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "TxData";

  // chain_id of the destination EVM chain
  string chain_id = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.customname) = "ChainID",
    (gogoproto.jsontag) = "chainID"
  ];
  // nonce corresponds to the account nonce (transaction sequence).
  uint64 nonce = 2;
  // gas_price defines the value for each gas unit
  string gas_price = 3 [ (gogoproto.customtype) = "cosmossdk.io/math.Int" ];
  // gas defines the gas limit defined for the transaction.
  uint64 gas = 4 [ (gogoproto.customname) = "GasLimit" ];
  // to is the recipient address in hex format
  string to = 5;
  // value defines the unsigned integer value of the transaction amount.
  string value = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.customname) = "Amount"
  ];
  // data is the data payload bytes of the transaction.
  bytes data = 7;
  // accesses is an array of access tuples
  repeated AccessTuple accesses = 8 [
    (gogoproto.castrepeated) = "AccessList",
    (gogoproto.jsontag) = "accessList",
    (gogoproto.nullable) = false
  ];
  // v defines the signature value
  bytes v = 9;
  // r defines the signature value
  bytes r = 10;
  // s define the signature value
  bytes s = 11;
}

// Deprecated: used for backward compatibility
message DynamicFeeTx {
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "TxData";

  // chain_id of the destination EVM chain
  string chain_id = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.customname) = "ChainID",
    (gogoproto.jsontag) = "chainID"
  ];
  // nonce corresponds to the account nonce (transaction sequence).
  uint64 nonce = 2;
  // gas_tip_cap defines the max value for the gas tip
  string gas_tip_cap = 3 [ (gogoproto.customtype) = "cosmossdk.io/math.Int" ];
  // gas_fee_cap defines the max value for the gas fee
  string gas_fee_cap = 4 [ (gogoproto.customtype) = "cosmossdk.io/math.Int" ];
  // gas defines the gas limit defined for the transaction.
  uint64 gas = 5 [ (gogoproto.customname) = "GasLimit" ];
  // to is the hex formatted address of the recipient
  string to = 6;
  // value defines the the transaction amount.
  string value = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.customname) = "Amount"
  ];
  // data is the data payload bytes of the transaction.
  bytes data = 8;
  // accesses is an array of access tuples
  repeated AccessTuple accesses = 9 [
    (gogoproto.castrepeated) = "AccessList",
    (gogoproto.jsontag) = "accessList",
    (gogoproto.nullable) = false
  ];
  // v defines the signature value
  bytes v = 10;
  // r defines the signature value
  bytes r = 11;
  // s define the signature value
  bytes s = 12;
}

// Deprecated: ExtensionOptionsEthereumTx is the extension options container for
// Ethereum transactions
message ExtensionOptionsEthereumTx {
  option (gogoproto.goproto_getters) = false;
}

// Deprecated:
// MsgUpdateParams defines a Msg for updating the x/evm module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/evm parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}