// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	banktypes "github.com/cosmos/cosmos-sdk/x/bank/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// BankKeeper is an autogenerated mock type for the BankKeeper type
type BankKeeper struct {
	mock.Mock
}

type BankKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *BankKeeper) EXPECT() *BankKeeper_Expecter {
	return &BankKeeper_Expecter{mock: &_m.Mock}
}

// BlockedAddr provides a mock function with given fields: addr
func (_m *BankKeeper) BlockedAddr(addr types.AccAddress) bool {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for BlockedAddr")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.AccAddress) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BankKeeper_BlockedAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockedAddr'
type BankKeeper_BlockedAddr_Call struct {
	*mock.Call
}

// BlockedAddr is a helper method to define mock.On call
//   - addr types.AccAddress
func (_e *BankKeeper_Expecter) BlockedAddr(addr interface{}) *BankKeeper_BlockedAddr_Call {
	return &BankKeeper_BlockedAddr_Call{Call: _e.mock.On("BlockedAddr", addr)}
}

func (_c *BankKeeper_BlockedAddr_Call) Run(run func(addr types.AccAddress)) *BankKeeper_BlockedAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.AccAddress))
	})
	return _c
}

func (_c *BankKeeper_BlockedAddr_Call) Return(_a0 bool) *BankKeeper_BlockedAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_BlockedAddr_Call) RunAndReturn(run func(types.AccAddress) bool) *BankKeeper_BlockedAddr_Call {
	_c.Call.Return(run)
	return _c
}

// BurnCoins provides a mock function with given fields: ctx, moduleName, amt
func (_m *BankKeeper) BurnCoins(ctx context.Context, moduleName string, amt types.Coins) error {
	ret := _m.Called(ctx, moduleName, amt)

	if len(ret) == 0 {
		panic("no return value specified for BurnCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Coins) error); ok {
		r0 = rf(ctx, moduleName, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_BurnCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BurnCoins'
type BankKeeper_BurnCoins_Call struct {
	*mock.Call
}

// BurnCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - moduleName string
//   - amt types.Coins
func (_e *BankKeeper_Expecter) BurnCoins(ctx interface{}, moduleName interface{}, amt interface{}) *BankKeeper_BurnCoins_Call {
	return &BankKeeper_BurnCoins_Call{Call: _e.mock.On("BurnCoins", ctx, moduleName, amt)}
}

func (_c *BankKeeper_BurnCoins_Call) Run(run func(ctx context.Context, moduleName string, amt types.Coins)) *BankKeeper_BurnCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Coins))
	})
	return _c
}

func (_c *BankKeeper_BurnCoins_Call) Return(_a0 error) *BankKeeper_BurnCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_BurnCoins_Call) RunAndReturn(run func(context.Context, string, types.Coins) error) *BankKeeper_BurnCoins_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllBalances provides a mock function with given fields: ctx, addr
func (_m *BankKeeper) GetAllBalances(ctx context.Context, addr types.AccAddress) types.Coins {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBalances")
	}

	var r0 types.Coins
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress) types.Coins); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Coins)
		}
	}

	return r0
}

// BankKeeper_GetAllBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllBalances'
type BankKeeper_GetAllBalances_Call struct {
	*mock.Call
}

// GetAllBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - addr types.AccAddress
func (_e *BankKeeper_Expecter) GetAllBalances(ctx interface{}, addr interface{}) *BankKeeper_GetAllBalances_Call {
	return &BankKeeper_GetAllBalances_Call{Call: _e.mock.On("GetAllBalances", ctx, addr)}
}

func (_c *BankKeeper_GetAllBalances_Call) Run(run func(ctx context.Context, addr types.AccAddress)) *BankKeeper_GetAllBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *BankKeeper_GetAllBalances_Call) Return(_a0 types.Coins) *BankKeeper_GetAllBalances_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_GetAllBalances_Call) RunAndReturn(run func(context.Context, types.AccAddress) types.Coins) *BankKeeper_GetAllBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, addr, denom
func (_m *BankKeeper) GetBalance(ctx context.Context, addr types.AccAddress, denom string) types.Coin {
	ret := _m.Called(ctx, addr, denom)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 types.Coin
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, string) types.Coin); ok {
		r0 = rf(ctx, addr, denom)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	return r0
}

// BankKeeper_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type BankKeeper_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - addr types.AccAddress
//   - denom string
func (_e *BankKeeper_Expecter) GetBalance(ctx interface{}, addr interface{}, denom interface{}) *BankKeeper_GetBalance_Call {
	return &BankKeeper_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, addr, denom)}
}

func (_c *BankKeeper_GetBalance_Call) Run(run func(ctx context.Context, addr types.AccAddress, denom string)) *BankKeeper_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress), args[2].(string))
	})
	return _c
}

func (_c *BankKeeper_GetBalance_Call) Return(_a0 types.Coin) *BankKeeper_GetBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_GetBalance_Call) RunAndReturn(run func(context.Context, types.AccAddress, string) types.Coin) *BankKeeper_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetDenomMetaData provides a mock function with given fields: ctx, denom
func (_m *BankKeeper) GetDenomMetaData(ctx context.Context, denom string) (banktypes.Metadata, bool) {
	ret := _m.Called(ctx, denom)

	if len(ret) == 0 {
		panic("no return value specified for GetDenomMetaData")
	}

	var r0 banktypes.Metadata
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) (banktypes.Metadata, bool)); ok {
		return rf(ctx, denom)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) banktypes.Metadata); ok {
		r0 = rf(ctx, denom)
	} else {
		r0 = ret.Get(0).(banktypes.Metadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, denom)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// BankKeeper_GetDenomMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDenomMetaData'
type BankKeeper_GetDenomMetaData_Call struct {
	*mock.Call
}

// GetDenomMetaData is a helper method to define mock.On call
//   - ctx context.Context
//   - denom string
func (_e *BankKeeper_Expecter) GetDenomMetaData(ctx interface{}, denom interface{}) *BankKeeper_GetDenomMetaData_Call {
	return &BankKeeper_GetDenomMetaData_Call{Call: _e.mock.On("GetDenomMetaData", ctx, denom)}
}

func (_c *BankKeeper_GetDenomMetaData_Call) Run(run func(ctx context.Context, denom string)) *BankKeeper_GetDenomMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BankKeeper_GetDenomMetaData_Call) Return(_a0 banktypes.Metadata, _a1 bool) *BankKeeper_GetDenomMetaData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BankKeeper_GetDenomMetaData_Call) RunAndReturn(run func(context.Context, string) (banktypes.Metadata, bool)) *BankKeeper_GetDenomMetaData_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupply provides a mock function with given fields: ctx, denom
func (_m *BankKeeper) GetSupply(ctx context.Context, denom string) types.Coin {
	ret := _m.Called(ctx, denom)

	if len(ret) == 0 {
		panic("no return value specified for GetSupply")
	}

	var r0 types.Coin
	if rf, ok := ret.Get(0).(func(context.Context, string) types.Coin); ok {
		r0 = rf(ctx, denom)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	return r0
}

// BankKeeper_GetSupply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupply'
type BankKeeper_GetSupply_Call struct {
	*mock.Call
}

// GetSupply is a helper method to define mock.On call
//   - ctx context.Context
//   - denom string
func (_e *BankKeeper_Expecter) GetSupply(ctx interface{}, denom interface{}) *BankKeeper_GetSupply_Call {
	return &BankKeeper_GetSupply_Call{Call: _e.mock.On("GetSupply", ctx, denom)}
}

func (_c *BankKeeper_GetSupply_Call) Run(run func(ctx context.Context, denom string)) *BankKeeper_GetSupply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BankKeeper_GetSupply_Call) Return(_a0 types.Coin) *BankKeeper_GetSupply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_GetSupply_Call) RunAndReturn(run func(context.Context, string) types.Coin) *BankKeeper_GetSupply_Call {
	_c.Call.Return(run)
	return _c
}

// IsSendEnabledCoin provides a mock function with given fields: ctx, coin
func (_m *BankKeeper) IsSendEnabledCoin(ctx context.Context, coin types.Coin) bool {
	ret := _m.Called(ctx, coin)

	if len(ret) == 0 {
		panic("no return value specified for IsSendEnabledCoin")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, types.Coin) bool); ok {
		r0 = rf(ctx, coin)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// BankKeeper_IsSendEnabledCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSendEnabledCoin'
type BankKeeper_IsSendEnabledCoin_Call struct {
	*mock.Call
}

// IsSendEnabledCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - coin types.Coin
func (_e *BankKeeper_Expecter) IsSendEnabledCoin(ctx interface{}, coin interface{}) *BankKeeper_IsSendEnabledCoin_Call {
	return &BankKeeper_IsSendEnabledCoin_Call{Call: _e.mock.On("IsSendEnabledCoin", ctx, coin)}
}

func (_c *BankKeeper_IsSendEnabledCoin_Call) Run(run func(ctx context.Context, coin types.Coin)) *BankKeeper_IsSendEnabledCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Coin))
	})
	return _c
}

func (_c *BankKeeper_IsSendEnabledCoin_Call) Return(_a0 bool) *BankKeeper_IsSendEnabledCoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_IsSendEnabledCoin_Call) RunAndReturn(run func(context.Context, types.Coin) bool) *BankKeeper_IsSendEnabledCoin_Call {
	_c.Call.Return(run)
	return _c
}

// IsSendEnabledCoins provides a mock function with given fields: ctx, coins
func (_m *BankKeeper) IsSendEnabledCoins(ctx context.Context, coins ...types.Coin) error {
	_va := make([]interface{}, len(coins))
	for _i := range coins {
		_va[_i] = coins[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IsSendEnabledCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...types.Coin) error); ok {
		r0 = rf(ctx, coins...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_IsSendEnabledCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSendEnabledCoins'
type BankKeeper_IsSendEnabledCoins_Call struct {
	*mock.Call
}

// IsSendEnabledCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - coins ...types.Coin
func (_e *BankKeeper_Expecter) IsSendEnabledCoins(ctx interface{}, coins ...interface{}) *BankKeeper_IsSendEnabledCoins_Call {
	return &BankKeeper_IsSendEnabledCoins_Call{Call: _e.mock.On("IsSendEnabledCoins",
		append([]interface{}{ctx}, coins...)...)}
}

func (_c *BankKeeper_IsSendEnabledCoins_Call) Run(run func(ctx context.Context, coins ...types.Coin)) *BankKeeper_IsSendEnabledCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.Coin, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.Coin)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *BankKeeper_IsSendEnabledCoins_Call) Return(_a0 error) *BankKeeper_IsSendEnabledCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_IsSendEnabledCoins_Call) RunAndReturn(run func(context.Context, ...types.Coin) error) *BankKeeper_IsSendEnabledCoins_Call {
	_c.Call.Return(run)
	return _c
}

// IterateAccountBalances provides a mock function with given fields: ctx, account, cb
func (_m *BankKeeper) IterateAccountBalances(ctx context.Context, account types.AccAddress, cb func(types.Coin) bool) {
	_m.Called(ctx, account, cb)
}

// BankKeeper_IterateAccountBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateAccountBalances'
type BankKeeper_IterateAccountBalances_Call struct {
	*mock.Call
}

// IterateAccountBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - account types.AccAddress
//   - cb func(types.Coin) bool
func (_e *BankKeeper_Expecter) IterateAccountBalances(ctx interface{}, account interface{}, cb interface{}) *BankKeeper_IterateAccountBalances_Call {
	return &BankKeeper_IterateAccountBalances_Call{Call: _e.mock.On("IterateAccountBalances", ctx, account, cb)}
}

func (_c *BankKeeper_IterateAccountBalances_Call) Run(run func(ctx context.Context, account types.AccAddress, cb func(types.Coin) bool)) *BankKeeper_IterateAccountBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress), args[2].(func(types.Coin) bool))
	})
	return _c
}

func (_c *BankKeeper_IterateAccountBalances_Call) Return() *BankKeeper_IterateAccountBalances_Call {
	_c.Call.Return()
	return _c
}

func (_c *BankKeeper_IterateAccountBalances_Call) RunAndReturn(run func(context.Context, types.AccAddress, func(types.Coin) bool)) *BankKeeper_IterateAccountBalances_Call {
	_c.Run(run)
	return _c
}

// IterateAllBalances provides a mock function with given fields: ctx, cb
func (_m *BankKeeper) IterateAllBalances(ctx context.Context, cb func(types.AccAddress, types.Coin) bool) {
	_m.Called(ctx, cb)
}

// BankKeeper_IterateAllBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateAllBalances'
type BankKeeper_IterateAllBalances_Call struct {
	*mock.Call
}

// IterateAllBalances is a helper method to define mock.On call
//   - ctx context.Context
//   - cb func(types.AccAddress , types.Coin) bool
func (_e *BankKeeper_Expecter) IterateAllBalances(ctx interface{}, cb interface{}) *BankKeeper_IterateAllBalances_Call {
	return &BankKeeper_IterateAllBalances_Call{Call: _e.mock.On("IterateAllBalances", ctx, cb)}
}

func (_c *BankKeeper_IterateAllBalances_Call) Run(run func(ctx context.Context, cb func(types.AccAddress, types.Coin) bool)) *BankKeeper_IterateAllBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(types.AccAddress, types.Coin) bool))
	})
	return _c
}

func (_c *BankKeeper_IterateAllBalances_Call) Return() *BankKeeper_IterateAllBalances_Call {
	_c.Call.Return()
	return _c
}

func (_c *BankKeeper_IterateAllBalances_Call) RunAndReturn(run func(context.Context, func(types.AccAddress, types.Coin) bool)) *BankKeeper_IterateAllBalances_Call {
	_c.Run(run)
	return _c
}

// IterateTotalSupply provides a mock function with given fields: ctx, cb
func (_m *BankKeeper) IterateTotalSupply(ctx context.Context, cb func(types.Coin) bool) {
	_m.Called(ctx, cb)
}

// BankKeeper_IterateTotalSupply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateTotalSupply'
type BankKeeper_IterateTotalSupply_Call struct {
	*mock.Call
}

// IterateTotalSupply is a helper method to define mock.On call
//   - ctx context.Context
//   - cb func(types.Coin) bool
func (_e *BankKeeper_Expecter) IterateTotalSupply(ctx interface{}, cb interface{}) *BankKeeper_IterateTotalSupply_Call {
	return &BankKeeper_IterateTotalSupply_Call{Call: _e.mock.On("IterateTotalSupply", ctx, cb)}
}

func (_c *BankKeeper_IterateTotalSupply_Call) Run(run func(ctx context.Context, cb func(types.Coin) bool)) *BankKeeper_IterateTotalSupply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(types.Coin) bool))
	})
	return _c
}

func (_c *BankKeeper_IterateTotalSupply_Call) Return() *BankKeeper_IterateTotalSupply_Call {
	_c.Call.Return()
	return _c
}

func (_c *BankKeeper_IterateTotalSupply_Call) RunAndReturn(run func(context.Context, func(types.Coin) bool)) *BankKeeper_IterateTotalSupply_Call {
	_c.Run(run)
	return _c
}

// MintCoins provides a mock function with given fields: ctx, moduleName, amt
func (_m *BankKeeper) MintCoins(ctx context.Context, moduleName string, amt types.Coins) error {
	ret := _m.Called(ctx, moduleName, amt)

	if len(ret) == 0 {
		panic("no return value specified for MintCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.Coins) error); ok {
		r0 = rf(ctx, moduleName, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_MintCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MintCoins'
type BankKeeper_MintCoins_Call struct {
	*mock.Call
}

// MintCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - moduleName string
//   - amt types.Coins
func (_e *BankKeeper_Expecter) MintCoins(ctx interface{}, moduleName interface{}, amt interface{}) *BankKeeper_MintCoins_Call {
	return &BankKeeper_MintCoins_Call{Call: _e.mock.On("MintCoins", ctx, moduleName, amt)}
}

func (_c *BankKeeper_MintCoins_Call) Run(run func(ctx context.Context, moduleName string, amt types.Coins)) *BankKeeper_MintCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.Coins))
	})
	return _c
}

func (_c *BankKeeper_MintCoins_Call) Return(_a0 error) *BankKeeper_MintCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_MintCoins_Call) RunAndReturn(run func(context.Context, string, types.Coins) error) *BankKeeper_MintCoins_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoins provides a mock function with given fields: ctx, fromAddr, toAddr, amt
func (_m *BankKeeper) SendCoins(ctx context.Context, fromAddr types.AccAddress, toAddr types.AccAddress, amt types.Coins) error {
	ret := _m.Called(ctx, fromAddr, toAddr, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.AccAddress, types.Coins) error); ok {
		r0 = rf(ctx, fromAddr, toAddr, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_SendCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoins'
type BankKeeper_SendCoins_Call struct {
	*mock.Call
}

// SendCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - fromAddr types.AccAddress
//   - toAddr types.AccAddress
//   - amt types.Coins
func (_e *BankKeeper_Expecter) SendCoins(ctx interface{}, fromAddr interface{}, toAddr interface{}, amt interface{}) *BankKeeper_SendCoins_Call {
	return &BankKeeper_SendCoins_Call{Call: _e.mock.On("SendCoins", ctx, fromAddr, toAddr, amt)}
}

func (_c *BankKeeper_SendCoins_Call) Run(run func(ctx context.Context, fromAddr types.AccAddress, toAddr types.AccAddress, amt types.Coins)) *BankKeeper_SendCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress), args[2].(types.AccAddress), args[3].(types.Coins))
	})
	return _c
}

func (_c *BankKeeper_SendCoins_Call) Return(_a0 error) *BankKeeper_SendCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_SendCoins_Call) RunAndReturn(run func(context.Context, types.AccAddress, types.AccAddress, types.Coins) error) *BankKeeper_SendCoins_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoinsFromAccountToModule provides a mock function with given fields: ctx, senderAddr, recipientModule, amt
func (_m *BankKeeper) SendCoinsFromAccountToModule(ctx context.Context, senderAddr types.AccAddress, recipientModule string, amt types.Coins) error {
	ret := _m.Called(ctx, senderAddr, recipientModule, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoinsFromAccountToModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, string, types.Coins) error); ok {
		r0 = rf(ctx, senderAddr, recipientModule, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_SendCoinsFromAccountToModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoinsFromAccountToModule'
type BankKeeper_SendCoinsFromAccountToModule_Call struct {
	*mock.Call
}

// SendCoinsFromAccountToModule is a helper method to define mock.On call
//   - ctx context.Context
//   - senderAddr types.AccAddress
//   - recipientModule string
//   - amt types.Coins
func (_e *BankKeeper_Expecter) SendCoinsFromAccountToModule(ctx interface{}, senderAddr interface{}, recipientModule interface{}, amt interface{}) *BankKeeper_SendCoinsFromAccountToModule_Call {
	return &BankKeeper_SendCoinsFromAccountToModule_Call{Call: _e.mock.On("SendCoinsFromAccountToModule", ctx, senderAddr, recipientModule, amt)}
}

func (_c *BankKeeper_SendCoinsFromAccountToModule_Call) Run(run func(ctx context.Context, senderAddr types.AccAddress, recipientModule string, amt types.Coins)) *BankKeeper_SendCoinsFromAccountToModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress), args[2].(string), args[3].(types.Coins))
	})
	return _c
}

func (_c *BankKeeper_SendCoinsFromAccountToModule_Call) Return(_a0 error) *BankKeeper_SendCoinsFromAccountToModule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_SendCoinsFromAccountToModule_Call) RunAndReturn(run func(context.Context, types.AccAddress, string, types.Coins) error) *BankKeeper_SendCoinsFromAccountToModule_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoinsFromModuleToAccount provides a mock function with given fields: ctx, senderModule, recipientAddr, amt
func (_m *BankKeeper) SendCoinsFromModuleToAccount(ctx context.Context, senderModule string, recipientAddr types.AccAddress, amt types.Coins) error {
	ret := _m.Called(ctx, senderModule, recipientAddr, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoinsFromModuleToAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.AccAddress, types.Coins) error); ok {
		r0 = rf(ctx, senderModule, recipientAddr, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_SendCoinsFromModuleToAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoinsFromModuleToAccount'
type BankKeeper_SendCoinsFromModuleToAccount_Call struct {
	*mock.Call
}

// SendCoinsFromModuleToAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - senderModule string
//   - recipientAddr types.AccAddress
//   - amt types.Coins
func (_e *BankKeeper_Expecter) SendCoinsFromModuleToAccount(ctx interface{}, senderModule interface{}, recipientAddr interface{}, amt interface{}) *BankKeeper_SendCoinsFromModuleToAccount_Call {
	return &BankKeeper_SendCoinsFromModuleToAccount_Call{Call: _e.mock.On("SendCoinsFromModuleToAccount", ctx, senderModule, recipientAddr, amt)}
}

func (_c *BankKeeper_SendCoinsFromModuleToAccount_Call) Run(run func(ctx context.Context, senderModule string, recipientAddr types.AccAddress, amt types.Coins)) *BankKeeper_SendCoinsFromModuleToAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.AccAddress), args[3].(types.Coins))
	})
	return _c
}

func (_c *BankKeeper_SendCoinsFromModuleToAccount_Call) Return(_a0 error) *BankKeeper_SendCoinsFromModuleToAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_SendCoinsFromModuleToAccount_Call) RunAndReturn(run func(context.Context, string, types.AccAddress, types.Coins) error) *BankKeeper_SendCoinsFromModuleToAccount_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoinsFromModuleToModule provides a mock function with given fields: ctx, senderModule, recipientModule, amt
func (_m *BankKeeper) SendCoinsFromModuleToModule(ctx context.Context, senderModule string, recipientModule string, amt types.Coins) error {
	ret := _m.Called(ctx, senderModule, recipientModule, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoinsFromModuleToModule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, types.Coins) error); ok {
		r0 = rf(ctx, senderModule, recipientModule, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_SendCoinsFromModuleToModule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoinsFromModuleToModule'
type BankKeeper_SendCoinsFromModuleToModule_Call struct {
	*mock.Call
}

// SendCoinsFromModuleToModule is a helper method to define mock.On call
//   - ctx context.Context
//   - senderModule string
//   - recipientModule string
//   - amt types.Coins
func (_e *BankKeeper_Expecter) SendCoinsFromModuleToModule(ctx interface{}, senderModule interface{}, recipientModule interface{}, amt interface{}) *BankKeeper_SendCoinsFromModuleToModule_Call {
	return &BankKeeper_SendCoinsFromModuleToModule_Call{Call: _e.mock.On("SendCoinsFromModuleToModule", ctx, senderModule, recipientModule, amt)}
}

func (_c *BankKeeper_SendCoinsFromModuleToModule_Call) Run(run func(ctx context.Context, senderModule string, recipientModule string, amt types.Coins)) *BankKeeper_SendCoinsFromModuleToModule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(types.Coins))
	})
	return _c
}

func (_c *BankKeeper_SendCoinsFromModuleToModule_Call) Return(_a0 error) *BankKeeper_SendCoinsFromModuleToModule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_SendCoinsFromModuleToModule_Call) RunAndReturn(run func(context.Context, string, string, types.Coins) error) *BankKeeper_SendCoinsFromModuleToModule_Call {
	_c.Call.Return(run)
	return _c
}

// SetDenomMetaData provides a mock function with given fields: ctx, denomMetaData
func (_m *BankKeeper) SetDenomMetaData(ctx context.Context, denomMetaData banktypes.Metadata) {
	_m.Called(ctx, denomMetaData)
}

// BankKeeper_SetDenomMetaData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDenomMetaData'
type BankKeeper_SetDenomMetaData_Call struct {
	*mock.Call
}

// SetDenomMetaData is a helper method to define mock.On call
//   - ctx context.Context
//   - denomMetaData banktypes.Metadata
func (_e *BankKeeper_Expecter) SetDenomMetaData(ctx interface{}, denomMetaData interface{}) *BankKeeper_SetDenomMetaData_Call {
	return &BankKeeper_SetDenomMetaData_Call{Call: _e.mock.On("SetDenomMetaData", ctx, denomMetaData)}
}

func (_c *BankKeeper_SetDenomMetaData_Call) Run(run func(ctx context.Context, denomMetaData banktypes.Metadata)) *BankKeeper_SetDenomMetaData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(banktypes.Metadata))
	})
	return _c
}

func (_c *BankKeeper_SetDenomMetaData_Call) Return() *BankKeeper_SetDenomMetaData_Call {
	_c.Call.Return()
	return _c
}

func (_c *BankKeeper_SetDenomMetaData_Call) RunAndReturn(run func(context.Context, banktypes.Metadata)) *BankKeeper_SetDenomMetaData_Call {
	_c.Run(run)
	return _c
}

// SpendableCoin provides a mock function with given fields: ctx, addr, denom
func (_m *BankKeeper) SpendableCoin(ctx context.Context, addr types.AccAddress, denom string) types.Coin {
	ret := _m.Called(ctx, addr, denom)

	if len(ret) == 0 {
		panic("no return value specified for SpendableCoin")
	}

	var r0 types.Coin
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, string) types.Coin); ok {
		r0 = rf(ctx, addr, denom)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	return r0
}

// BankKeeper_SpendableCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpendableCoin'
type BankKeeper_SpendableCoin_Call struct {
	*mock.Call
}

// SpendableCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - addr types.AccAddress
//   - denom string
func (_e *BankKeeper_Expecter) SpendableCoin(ctx interface{}, addr interface{}, denom interface{}) *BankKeeper_SpendableCoin_Call {
	return &BankKeeper_SpendableCoin_Call{Call: _e.mock.On("SpendableCoin", ctx, addr, denom)}
}

func (_c *BankKeeper_SpendableCoin_Call) Run(run func(ctx context.Context, addr types.AccAddress, denom string)) *BankKeeper_SpendableCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress), args[2].(string))
	})
	return _c
}

func (_c *BankKeeper_SpendableCoin_Call) Return(_a0 types.Coin) *BankKeeper_SpendableCoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_SpendableCoin_Call) RunAndReturn(run func(context.Context, types.AccAddress, string) types.Coin) *BankKeeper_SpendableCoin_Call {
	_c.Call.Return(run)
	return _c
}

// NewBankKeeper creates a new instance of BankKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBankKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *BankKeeper {
	mock := &BankKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
