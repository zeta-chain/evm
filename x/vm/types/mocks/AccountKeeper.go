// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	address "cosmossdk.io/core/address"
	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AccountKeeper is an autogenerated mock type for the AccountKeeper type
type AccountKeeper struct {
	mock.Mock
}

// AddressCodec provides a mock function with no fields
func (_m *AccountKeeper) AddressCodec() address.Codec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddressCodec")
	}

	var r0 address.Codec
	if rf, ok := ret.Get(0).(func() address.Codec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(address.Codec)
		}
	}

	return r0
}

// GetAccount provides a mock function with given fields: ctx, addr
func (_m *AccountKeeper) GetAccount(ctx context.Context, addr cosmos_sdktypes.AccAddress) cosmos_sdktypes.AccountI {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 cosmos_sdktypes.AccountI
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) cosmos_sdktypes.AccountI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.AccountI)
		}
	}

	return r0
}

// GetModuleAddress provides a mock function with given fields: moduleName
func (_m *AccountKeeper) GetModuleAddress(moduleName string) cosmos_sdktypes.AccAddress {
	ret := _m.Called(moduleName)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAddress")
	}

	var r0 cosmos_sdktypes.AccAddress
	if rf, ok := ret.Get(0).(func(string) cosmos_sdktypes.AccAddress); ok {
		r0 = rf(moduleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.AccAddress)
		}
	}

	return r0
}

// GetParams provides a mock function with given fields: ctx
func (_m *AccountKeeper) GetParams(ctx context.Context) authtypes.Params {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetParams")
	}

	var r0 authtypes.Params
	if rf, ok := ret.Get(0).(func(context.Context) authtypes.Params); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(authtypes.Params)
	}

	return r0
}

// GetSequence provides a mock function with given fields: ctx, account
func (_m *AccountKeeper) GetSequence(ctx context.Context, account cosmos_sdktypes.AccAddress) (uint64, error) {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for GetSequence")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) (uint64, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) uint64); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasAccount provides a mock function with given fields: ctx, addr
func (_m *AccountKeeper) HasAccount(ctx context.Context, addr cosmos_sdktypes.AccAddress) bool {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for HasAccount")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) bool); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IterateAccounts provides a mock function with given fields: ctx, cb
func (_m *AccountKeeper) IterateAccounts(ctx context.Context, cb func(cosmos_sdktypes.AccountI) bool) {
	_m.Called(ctx, cb)
}

// NewAccountWithAddress provides a mock function with given fields: ctx, addr
func (_m *AccountKeeper) NewAccountWithAddress(ctx context.Context, addr cosmos_sdktypes.AccAddress) cosmos_sdktypes.AccountI {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for NewAccountWithAddress")
	}

	var r0 cosmos_sdktypes.AccountI
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) cosmos_sdktypes.AccountI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.AccountI)
		}
	}

	return r0
}

// RemoveAccount provides a mock function with given fields: ctx, account
func (_m *AccountKeeper) RemoveAccount(ctx context.Context, account cosmos_sdktypes.AccountI) {
	_m.Called(ctx, account)
}

// RemoveExpiredUnorderedNonces provides a mock function with given fields: ctx
func (_m *AccountKeeper) RemoveExpiredUnorderedNonces(ctx cosmos_sdktypes.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RemoveExpiredUnorderedNonces")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cosmos_sdktypes.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAccount provides a mock function with given fields: ctx, account
func (_m *AccountKeeper) SetAccount(ctx context.Context, account cosmos_sdktypes.AccountI) {
	_m.Called(ctx, account)
}

// TryAddUnorderedNonce provides a mock function with given fields: ctx, sender, timestamp
func (_m *AccountKeeper) TryAddUnorderedNonce(ctx cosmos_sdktypes.Context, sender []byte, timestamp time.Time) error {
	ret := _m.Called(ctx, sender, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for TryAddUnorderedNonce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(cosmos_sdktypes.Context, []byte, time.Time) error); ok {
		r0 = rf(ctx, sender, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnorderedTransactionsEnabled provides a mock function with no fields
func (_m *AccountKeeper) UnorderedTransactionsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnorderedTransactionsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewAccountKeeper creates a new instance of AccountKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *AccountKeeper {
	mock := &AccountKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
