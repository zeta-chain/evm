// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	address "cosmossdk.io/core/address"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/staking/types"
)

// StakingKeeper is an autogenerated mock type for the StakingKeeper type
type StakingKeeper struct {
	mock.Mock
}

func (_m *StakingKeeper) BondDenom(ctx context.Context) (string, error) {
	return "aatom", nil
}

// GetHistoricalInfo provides a mock function with given fields: ctx, height
func (_m *StakingKeeper) GetHistoricalInfo(ctx context.Context, height int64) (types.HistoricalInfo, error) {
	ret := _m.Called(ctx, height)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoricalInfo")
	}

	var r0 types.HistoricalInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (types.HistoricalInfo, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) types.HistoricalInfo); ok {
		r0 = rf(ctx, height)
	} else {
		r0 = ret.Get(0).(types.HistoricalInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorByConsAddr provides a mock function with given fields: ctx, consAddr
func (_m *StakingKeeper) GetValidatorByConsAddr(ctx context.Context, consAddr cosmos_sdktypes.ConsAddress) (types.Validator, error) {
	ret := _m.Called(ctx, consAddr)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorByConsAddr")
	}

	var r0 types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress) (types.Validator, error)); ok {
		return rf(ctx, consAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress) types.Validator); ok {
		r0 = rf(ctx, consAddr)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ConsAddress) error); ok {
		r1 = rf(ctx, consAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatorAddressCodec provides a mock function with given fields:
func (_m *StakingKeeper) ValidatorAddressCodec() address.Codec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidatorAddressCodec")
	}

	var r0 address.Codec
	if rf, ok := ret.Get(0).(func() address.Codec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(address.Codec)
		}
	}

	return r0
}

// NewStakingKeeper creates a new instance of StakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakingKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *StakingKeeper {
	mock := &StakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
