// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	coretypes "github.com/cometbft/cometbft/rpc/core/types"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	rpctypes "github.com/cosmos/evm/rpc/types"

	types "github.com/ethereum/go-ethereum/core/types"
)

// Backend is an autogenerated mock type for the Backend type
type Backend struct {
	mock.Mock
}

type Backend_Expecter struct {
	mock *mock.Mock
}

func (_m *Backend) EXPECT() *Backend_Expecter {
	return &Backend_Expecter{mock: &_m.Mock}
}

// BlockBloom provides a mock function with given fields: blockRes
func (_m *Backend) BlockBloom(blockRes *coretypes.ResultBlockResults) (types.Bloom, error) {
	ret := _m.Called(blockRes)

	if len(ret) == 0 {
		panic("no return value specified for BlockBloom")
	}

	var r0 types.Bloom
	var r1 error
	if rf, ok := ret.Get(0).(func(*coretypes.ResultBlockResults) (types.Bloom, error)); ok {
		return rf(blockRes)
	}
	if rf, ok := ret.Get(0).(func(*coretypes.ResultBlockResults) types.Bloom); ok {
		r0 = rf(blockRes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Bloom)
		}
	}

	if rf, ok := ret.Get(1).(func(*coretypes.ResultBlockResults) error); ok {
		r1 = rf(blockRes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_BlockBloom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockBloom'
type Backend_BlockBloom_Call struct {
	*mock.Call
}

// BlockBloom is a helper method to define mock.On call
//   - blockRes *coretypes.ResultBlockResults
func (_e *Backend_Expecter) BlockBloom(blockRes interface{}) *Backend_BlockBloom_Call {
	return &Backend_BlockBloom_Call{Call: _e.mock.On("BlockBloom", blockRes)}
}

func (_c *Backend_BlockBloom_Call) Run(run func(blockRes *coretypes.ResultBlockResults)) *Backend_BlockBloom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*coretypes.ResultBlockResults))
	})
	return _c
}

func (_c *Backend_BlockBloom_Call) Return(_a0 types.Bloom, _a1 error) *Backend_BlockBloom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_BlockBloom_Call) RunAndReturn(run func(*coretypes.ResultBlockResults) (types.Bloom, error)) *Backend_BlockBloom_Call {
	_c.Call.Return(run)
	return _c
}

// BloomStatus provides a mock function with no fields
func (_m *Backend) BloomStatus() (uint64, uint64) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BloomStatus")
	}

	var r0 uint64
	var r1 uint64
	if rf, ok := ret.Get(0).(func() (uint64, uint64)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() uint64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(uint64)
	}

	return r0, r1
}

// Backend_BloomStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BloomStatus'
type Backend_BloomStatus_Call struct {
	*mock.Call
}

// BloomStatus is a helper method to define mock.On call
func (_e *Backend_Expecter) BloomStatus() *Backend_BloomStatus_Call {
	return &Backend_BloomStatus_Call{Call: _e.mock.On("BloomStatus")}
}

func (_c *Backend_BloomStatus_Call) Run(run func()) *Backend_BloomStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_BloomStatus_Call) Return(_a0 uint64, _a1 uint64) *Backend_BloomStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_BloomStatus_Call) RunAndReturn(run func() (uint64, uint64)) *Backend_BloomStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByNumber provides a mock function with given fields: blockNum, fullTx
func (_m *Backend) GetBlockByNumber(blockNum rpctypes.BlockNumber, fullTx bool) (map[string]interface{}, error) {
	ret := _m.Called(blockNum, fullTx)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByNumber")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(rpctypes.BlockNumber, bool) (map[string]interface{}, error)); ok {
		return rf(blockNum, fullTx)
	}
	if rf, ok := ret.Get(0).(func(rpctypes.BlockNumber, bool) map[string]interface{}); ok {
		r0 = rf(blockNum, fullTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(rpctypes.BlockNumber, bool) error); ok {
		r1 = rf(blockNum, fullTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetBlockByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByNumber'
type Backend_GetBlockByNumber_Call struct {
	*mock.Call
}

// GetBlockByNumber is a helper method to define mock.On call
//   - blockNum rpctypes.BlockNumber
//   - fullTx bool
func (_e *Backend_Expecter) GetBlockByNumber(blockNum interface{}, fullTx interface{}) *Backend_GetBlockByNumber_Call {
	return &Backend_GetBlockByNumber_Call{Call: _e.mock.On("GetBlockByNumber", blockNum, fullTx)}
}

func (_c *Backend_GetBlockByNumber_Call) Run(run func(blockNum rpctypes.BlockNumber, fullTx bool)) *Backend_GetBlockByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rpctypes.BlockNumber), args[1].(bool))
	})
	return _c
}

func (_c *Backend_GetBlockByNumber_Call) Return(_a0 map[string]interface{}, _a1 error) *Backend_GetBlockByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetBlockByNumber_Call) RunAndReturn(run func(rpctypes.BlockNumber, bool) (map[string]interface{}, error)) *Backend_GetBlockByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: blockHash
func (_m *Backend) GetLogs(blockHash common.Hash) ([][]*types.Log, error) {
	ret := _m.Called(blockHash)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 [][]*types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) ([][]*types.Log, error)); ok {
		return rf(blockHash)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) [][]*types.Log); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]*types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type Backend_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - blockHash common.Hash
func (_e *Backend_Expecter) GetLogs(blockHash interface{}) *Backend_GetLogs_Call {
	return &Backend_GetLogs_Call{Call: _e.mock.On("GetLogs", blockHash)}
}

func (_c *Backend_GetLogs_Call) Run(run func(blockHash common.Hash)) *Backend_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *Backend_GetLogs_Call) Return(_a0 [][]*types.Log, _a1 error) *Backend_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetLogs_Call) RunAndReturn(run func(common.Hash) ([][]*types.Log, error)) *Backend_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogsByHeight provides a mock function with given fields: _a0
func (_m *Backend) GetLogsByHeight(_a0 *int64) ([][]*types.Log, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLogsByHeight")
	}

	var r0 [][]*types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(*int64) ([][]*types.Log, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*int64) [][]*types.Log); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]*types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(*int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_GetLogsByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogsByHeight'
type Backend_GetLogsByHeight_Call struct {
	*mock.Call
}

// GetLogsByHeight is a helper method to define mock.On call
//   - _a0 *int64
func (_e *Backend_Expecter) GetLogsByHeight(_a0 interface{}) *Backend_GetLogsByHeight_Call {
	return &Backend_GetLogsByHeight_Call{Call: _e.mock.On("GetLogsByHeight", _a0)}
}

func (_c *Backend_GetLogsByHeight_Call) Run(run func(_a0 *int64)) *Backend_GetLogsByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int64))
	})
	return _c
}

func (_c *Backend_GetLogsByHeight_Call) Return(_a0 [][]*types.Log, _a1 error) *Backend_GetLogsByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_GetLogsByHeight_Call) RunAndReturn(run func(*int64) ([][]*types.Log, error)) *Backend_GetLogsByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByHash provides a mock function with given fields: blockHash
func (_m *Backend) HeaderByHash(blockHash common.Hash) (*types.Header, error) {
	ret := _m.Called(blockHash)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByHash")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*types.Header, error)); ok {
		return rf(blockHash)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *types.Header); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_HeaderByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByHash'
type Backend_HeaderByHash_Call struct {
	*mock.Call
}

// HeaderByHash is a helper method to define mock.On call
//   - blockHash common.Hash
func (_e *Backend_Expecter) HeaderByHash(blockHash interface{}) *Backend_HeaderByHash_Call {
	return &Backend_HeaderByHash_Call{Call: _e.mock.On("HeaderByHash", blockHash)}
}

func (_c *Backend_HeaderByHash_Call) Run(run func(blockHash common.Hash)) *Backend_HeaderByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *Backend_HeaderByHash_Call) Return(_a0 *types.Header, _a1 error) *Backend_HeaderByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_HeaderByHash_Call) RunAndReturn(run func(common.Hash) (*types.Header, error)) *Backend_HeaderByHash_Call {
	_c.Call.Return(run)
	return _c
}

// HeaderByNumber provides a mock function with given fields: blockNum
func (_m *Backend) HeaderByNumber(blockNum rpctypes.BlockNumber) (*types.Header, error) {
	ret := _m.Called(blockNum)

	if len(ret) == 0 {
		panic("no return value specified for HeaderByNumber")
	}

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(rpctypes.BlockNumber) (*types.Header, error)); ok {
		return rf(blockNum)
	}
	if rf, ok := ret.Get(0).(func(rpctypes.BlockNumber) *types.Header); ok {
		r0 = rf(blockNum)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(rpctypes.BlockNumber) error); ok {
		r1 = rf(blockNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_HeaderByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeaderByNumber'
type Backend_HeaderByNumber_Call struct {
	*mock.Call
}

// HeaderByNumber is a helper method to define mock.On call
//   - blockNum rpctypes.BlockNumber
func (_e *Backend_Expecter) HeaderByNumber(blockNum interface{}) *Backend_HeaderByNumber_Call {
	return &Backend_HeaderByNumber_Call{Call: _e.mock.On("HeaderByNumber", blockNum)}
}

func (_c *Backend_HeaderByNumber_Call) Run(run func(blockNum rpctypes.BlockNumber)) *Backend_HeaderByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(rpctypes.BlockNumber))
	})
	return _c
}

func (_c *Backend_HeaderByNumber_Call) Return(_a0 *types.Header, _a1 error) *Backend_HeaderByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_HeaderByNumber_Call) RunAndReturn(run func(rpctypes.BlockNumber) (*types.Header, error)) *Backend_HeaderByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// RPCBlockRangeCap provides a mock function with no fields
func (_m *Backend) RPCBlockRangeCap() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCBlockRangeCap")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Backend_RPCBlockRangeCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCBlockRangeCap'
type Backend_RPCBlockRangeCap_Call struct {
	*mock.Call
}

// RPCBlockRangeCap is a helper method to define mock.On call
func (_e *Backend_Expecter) RPCBlockRangeCap() *Backend_RPCBlockRangeCap_Call {
	return &Backend_RPCBlockRangeCap_Call{Call: _e.mock.On("RPCBlockRangeCap")}
}

func (_c *Backend_RPCBlockRangeCap_Call) Run(run func()) *Backend_RPCBlockRangeCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_RPCBlockRangeCap_Call) Return(_a0 int32) *Backend_RPCBlockRangeCap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_RPCBlockRangeCap_Call) RunAndReturn(run func() int32) *Backend_RPCBlockRangeCap_Call {
	_c.Call.Return(run)
	return _c
}

// RPCFilterCap provides a mock function with no fields
func (_m *Backend) RPCFilterCap() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCFilterCap")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Backend_RPCFilterCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCFilterCap'
type Backend_RPCFilterCap_Call struct {
	*mock.Call
}

// RPCFilterCap is a helper method to define mock.On call
func (_e *Backend_Expecter) RPCFilterCap() *Backend_RPCFilterCap_Call {
	return &Backend_RPCFilterCap_Call{Call: _e.mock.On("RPCFilterCap")}
}

func (_c *Backend_RPCFilterCap_Call) Run(run func()) *Backend_RPCFilterCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_RPCFilterCap_Call) Return(_a0 int32) *Backend_RPCFilterCap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_RPCFilterCap_Call) RunAndReturn(run func() int32) *Backend_RPCFilterCap_Call {
	_c.Call.Return(run)
	return _c
}

// RPCLogsCap provides a mock function with no fields
func (_m *Backend) RPCLogsCap() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RPCLogsCap")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Backend_RPCLogsCap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RPCLogsCap'
type Backend_RPCLogsCap_Call struct {
	*mock.Call
}

// RPCLogsCap is a helper method to define mock.On call
func (_e *Backend_Expecter) RPCLogsCap() *Backend_RPCLogsCap_Call {
	return &Backend_RPCLogsCap_Call{Call: _e.mock.On("RPCLogsCap")}
}

func (_c *Backend_RPCLogsCap_Call) Run(run func()) *Backend_RPCLogsCap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Backend_RPCLogsCap_Call) Return(_a0 int32) *Backend_RPCLogsCap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Backend_RPCLogsCap_Call) RunAndReturn(run func() int32) *Backend_RPCLogsCap_Call {
	_c.Call.Return(run)
	return _c
}

// CometBlockByHash provides a mock function with given fields: hash
func (_m *Backend) CometBlockByHash(hash common.Hash) (*coretypes.ResultBlock, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for CometBlockByHash")
	}

	var r0 *coretypes.ResultBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (*coretypes.ResultBlock, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) *coretypes.ResultBlock); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_CometBlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CometBlockByHash'
type Backend_CometBlockByHash_Call struct {
	*mock.Call
}

// CometBlockByHash is a helper method to define mock.On call
//   - hash common.Hash
func (_e *Backend_Expecter) CometBlockByHash(hash interface{}) *Backend_CometBlockByHash_Call {
	return &Backend_CometBlockByHash_Call{Call: _e.mock.On("CometBlockByHash", hash)}
}

func (_c *Backend_CometBlockByHash_Call) Run(run func(hash common.Hash)) *Backend_CometBlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *Backend_CometBlockByHash_Call) Return(_a0 *coretypes.ResultBlock, _a1 error) *Backend_CometBlockByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_CometBlockByHash_Call) RunAndReturn(run func(common.Hash) (*coretypes.ResultBlock, error)) *Backend_CometBlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// CometBlockResultByNumber provides a mock function with given fields: height
func (_m *Backend) CometBlockResultByNumber(height *int64) (*coretypes.ResultBlockResults, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for CometBlockResultByNumber")
	}

	var r0 *coretypes.ResultBlockResults
	var r1 error
	if rf, ok := ret.Get(0).(func(*int64) (*coretypes.ResultBlockResults, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(*int64) *coretypes.ResultBlockResults); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coretypes.ResultBlockResults)
		}
	}

	if rf, ok := ret.Get(1).(func(*int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backend_CometBlockResultByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CometBlockResultByNumber'
type Backend_CometBlockResultByNumber_Call struct {
	*mock.Call
}

// CometBlockResultByNumber is a helper method to define mock.On call
//   - height *int64
func (_e *Backend_Expecter) CometBlockResultByNumber(height interface{}) *Backend_CometBlockResultByNumber_Call {
	return &Backend_CometBlockResultByNumber_Call{Call: _e.mock.On("CometBlockResultByNumber", height)}
}

func (_c *Backend_CometBlockResultByNumber_Call) Run(run func(height *int64)) *Backend_CometBlockResultByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int64))
	})
	return _c
}

func (_c *Backend_CometBlockResultByNumber_Call) Return(_a0 *coretypes.ResultBlockResults, _a1 error) *Backend_CometBlockResultByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Backend_CometBlockResultByNumber_Call) RunAndReturn(run func(*int64) (*coretypes.ResultBlockResults, error)) *Backend_CometBlockResultByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewBackend creates a new instance of Backend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBackend(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Backend {
	mock := &Backend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
