// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	core "github.com/ethereum/go-ethereum/core"

	event "github.com/ethereum/go-ethereum/event"

	mock "github.com/stretchr/testify/mock"

	params "github.com/ethereum/go-ethereum/params"

	types "github.com/ethereum/go-ethereum/core/types"

	vm "github.com/ethereum/go-ethereum/core/vm"
)

// BlockChain is an autogenerated mock type for the BlockChain type
type BlockChain struct {
	mock.Mock
}

// Config provides a mock function with no fields
func (_m *BlockChain) Config() *params.ChainConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *params.ChainConfig
	if rf, ok := ret.Get(0).(func() *params.ChainConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*params.ChainConfig)
		}
	}

	return r0
}

// CurrentBlock provides a mock function with no fields
func (_m *BlockChain) CurrentBlock() *types.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CurrentBlock")
	}

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func() *types.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	return r0
}

// StateAt provides a mock function with given fields: root
func (_m *BlockChain) StateAt(root common.Hash) (vm.StateDB, error) {
	ret := _m.Called(root)

	if len(ret) == 0 {
		panic("no return value specified for StateAt")
	}

	var r0 vm.StateDB
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Hash) (vm.StateDB, error)); ok {
		return rf(root)
	}
	if rf, ok := ret.Get(0).(func(common.Hash) vm.StateDB); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vm.StateDB)
		}
	}

	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeChainHeadEvent provides a mock function with given fields: ch
func (_m *BlockChain) SubscribeChainHeadEvent(ch chan<- core.ChainHeadEvent) event.Subscription {
	ret := _m.Called(ch)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeChainHeadEvent")
	}

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(chan<- core.ChainHeadEvent) event.Subscription); ok {
		r0 = rf(ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	return r0
}

// NewBlockChain creates a new instance of BlockChain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockChain(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockChain {
	mock := &BlockChain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
