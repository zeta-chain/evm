// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mempool "github.com/cosmos/evm/mempool"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	statedb "github.com/cosmos/evm/x/vm/statedb"

	storetypes "cosmossdk.io/store/types"

	types "github.com/cosmos/cosmos-sdk/types"

	vmtypes "github.com/cosmos/evm/x/vm/types"
)

// VMKeeper is an autogenerated mock type for the VMKeeper type
type VMKeeper struct {
	mock.Mock
}

// DeleteAccount provides a mock function with given fields: ctx, addr
func (_m *VMKeeper) DeleteAccount(ctx types.Context, addr common.Address) error {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, common.Address) error); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCode provides a mock function with given fields: ctx, codeHash
func (_m *VMKeeper) DeleteCode(ctx types.Context, codeHash []byte) {
	_m.Called(ctx, codeHash)
}

// DeleteState provides a mock function with given fields: ctx, addr, key
func (_m *VMKeeper) DeleteState(ctx types.Context, addr common.Address, key common.Hash) {
	_m.Called(ctx, addr, key)
}

// ForEachStorage provides a mock function with given fields: ctx, addr, cb
func (_m *VMKeeper) ForEachStorage(ctx types.Context, addr common.Address, cb func(common.Hash, common.Hash) bool) {
	_m.Called(ctx, addr, cb)
}

// GetAccount provides a mock function with given fields: ctx, addr
func (_m *VMKeeper) GetAccount(ctx types.Context, addr common.Address) *statedb.Account {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *statedb.Account
	if rf, ok := ret.Get(0).(func(types.Context, common.Address) *statedb.Account); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statedb.Account)
		}
	}

	return r0
}

// GetBaseFee provides a mock function with given fields: ctx
func (_m *VMKeeper) GetBaseFee(ctx types.Context) *big.Int {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBaseFee")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(types.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetCode provides a mock function with given fields: ctx, codeHash
func (_m *VMKeeper) GetCode(ctx types.Context, codeHash common.Hash) []byte {
	ret := _m.Called(ctx, codeHash)

	if len(ret) == 0 {
		panic("no return value specified for GetCode")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(types.Context, common.Hash) []byte); ok {
		r0 = rf(ctx, codeHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// GetCodeHash provides a mock function with given fields: ctx, addr
func (_m *VMKeeper) GetCodeHash(ctx types.Context, addr common.Address) common.Hash {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeHash")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.Context, common.Address) common.Hash); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// GetEvmCoinInfo provides a mock function with given fields: ctx
func (_m *VMKeeper) GetEvmCoinInfo(ctx types.Context) vmtypes.EvmCoinInfo {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEvmCoinInfo")
	}

	var r0 vmtypes.EvmCoinInfo
	if rf, ok := ret.Get(0).(func(types.Context) vmtypes.EvmCoinInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(vmtypes.EvmCoinInfo)
	}

	return r0
}

// GetParams provides a mock function with given fields: ctx
func (_m *VMKeeper) GetParams(ctx types.Context) vmtypes.Params {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetParams")
	}

	var r0 vmtypes.Params
	if rf, ok := ret.Get(0).(func(types.Context) vmtypes.Params); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(vmtypes.Params)
	}

	return r0
}

// GetState provides a mock function with given fields: ctx, addr, key
func (_m *VMKeeper) GetState(ctx types.Context, addr common.Address, key common.Hash) common.Hash {
	ret := _m.Called(ctx, addr, key)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(types.Context, common.Address, common.Hash) common.Hash); ok {
		r0 = rf(ctx, addr, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// KVStoreKeys provides a mock function with no fields
func (_m *VMKeeper) KVStoreKeys() map[string]*storetypes.KVStoreKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for KVStoreKeys")
	}

	var r0 map[string]*storetypes.KVStoreKey
	if rf, ok := ret.Get(0).(func() map[string]*storetypes.KVStoreKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*storetypes.KVStoreKey)
		}
	}

	return r0
}

// SetAccount provides a mock function with given fields: ctx, addr, account
func (_m *VMKeeper) SetAccount(ctx types.Context, addr common.Address, account statedb.Account) error {
	ret := _m.Called(ctx, addr, account)

	if len(ret) == 0 {
		panic("no return value specified for SetAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, common.Address, statedb.Account) error); ok {
		r0 = rf(ctx, addr, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCode provides a mock function with given fields: ctx, codeHash, code
func (_m *VMKeeper) SetCode(ctx types.Context, codeHash []byte, code []byte) {
	_m.Called(ctx, codeHash, code)
}

// SetEvmMempool provides a mock function with given fields: evmMempool
func (_m *VMKeeper) SetEvmMempool(evmMempool *mempool.ExperimentalEVMMempool) {
	_m.Called(evmMempool)
}

// SetState provides a mock function with given fields: ctx, addr, key, value
func (_m *VMKeeper) SetState(ctx types.Context, addr common.Address, key common.Hash, value []byte) {
	_m.Called(ctx, addr, key, value)
}

// NewVMKeeper creates a new instance of VMKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVMKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *VMKeeper {
	mock := &VMKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
